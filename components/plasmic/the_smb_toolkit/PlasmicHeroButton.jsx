// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: IW0QnFgF_g4
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TopButton from "../../TopButton"; // plasmic-import: 20c4knu-O3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicHeroButton.module.css"; // plasmic-import: IW0QnFgF_g4/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uwRFoKRiRo0/icon

export const PlasmicHeroButton__VariantProps = new Array("hundredWidth");

export const PlasmicHeroButton__ArgProps = new Array(
  "boxTitle",
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "link"
);

function PlasmicHeroButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.roothundredWidth]: hasVariant(
            variants,
            "hundredWidth",
            "hundredWidth"
          )
        }
      )}
      component={Link}
      href={args.link}
      platform={"nextjs"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tmj2C)}>
        <TopButton
          data-plasmic-name={"topButton"}
          data-plasmic-override={overrides.topButton}
          className={classNames("__wab_instance", sty.topButton)}
          slot3={p.renderPlasmicSlot({
            defaultContents: "yearly plan",
            value: args.slot3
          })}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__jSxnw)}>
        <div className={classNames(projectcss.all, sty.freeBox__vPuGq)}>
          {p.renderPlasmicSlot({
            defaultContents: "Small Businesses",
            value: args.boxTitle,
            className: classNames(sty.slotTargetBoxTitle)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___902Qw)}>
          {p.renderPlasmicSlot({
            defaultContents: "description",
            value: args.slot4,
            className: classNames(sty.slotTargetSlot4)
          })}
        </div>
      </div>

      {(hasVariant(variants, "hundredWidth", "hundredWidth") ? true : true) ? (
        <div
          data-plasmic-name={"cheks"}
          data-plasmic-override={overrides.cheks}
          className={classNames(projectcss.all, sty.cheks, {
            [sty.chekshundredWidth]: hasVariant(
              variants,
              "hundredWidth",
              "hundredWidth"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kWjQ)}>
            <ChecksvgIcon
              className={classNames(projectcss.all, sty.svg___0V6C9)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__lHdG)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__sMhzu)}>
            <ChecksvgIcon
              className={classNames(projectcss.all, sty.svg__bvzZm)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__ax5Lg)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__iIppj)}>
            <ChecksvgIcon
              className={classNames(projectcss.all, sty.svg__pIWze)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__kQnDh)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__nBv7L)}>
        <div className={classNames(projectcss.all, sty.freeBox___2Jfe)}>
          {p.renderPlasmicSlot({
            defaultContents: "Access our free toolkit",
            value: args.slot5,
            className: classNames(sty.slotTargetSlot5)
          })}
        </div>
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "topButton", "cheks"],
  topButton: ["topButton"],
  cheks: ["cheks"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroButton__ArgProps,
      internalVariantPropNames: PlasmicHeroButton__VariantProps
    });

    return PlasmicHeroButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroButton";
  } else {
    func.displayName = `PlasmicHeroButton.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroButton = Object.assign(
  // Top-level PlasmicHeroButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topButton: makeNodeComponent("topButton"),
    cheks: makeNodeComponent("cheks"),
    // Metadata about props expected for PlasmicHeroButton
    internalVariantProps: PlasmicHeroButton__VariantProps,
    internalArgProps: PlasmicHeroButton__ArgProps
  }
);

export default PlasmicHeroButton;
/* prettier-ignore-end */
