// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: 4mErNniXH-
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicTopicBox.module.css"; // plasmic-import: 4mErNniXH-/css

export const PlasmicTopicBox__VariantProps = new Array(
  "unnamedVariant",
  "unnamedVariant2",
  "unnamedVariant3"
);

export const PlasmicTopicBox__ArgProps = new Array(
  "slot",
  "img",
  "topicBoxLink"
);

function PlasmicTopicBox__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={args.topicBoxLink}
        platform={"nextjs"}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pZPkH, {
            [sty.freeBoxunnamedVariant2__pZPkHLabyu]: hasVariant(
              variants,
              "unnamedVariant2",
              "unnamedVariant2"
            ),

            [sty.freeBoxunnamedVariant3__pZPkHxeCxk]: hasVariant(
              variants,
              "unnamedVariant3",
              "unnamedVariant3"
            ),

            [sty.freeBoxunnamedVariant__pZPkHp7ZQ]: hasVariant(
              variants,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100px"}
            loading={"lazy"}
            src={
              args.img !== undefined
                ? args.img
                : {
                    src: "/plasmic/the_smb_toolkit/images/marketingpng.png",
                    fullWidth: 508,
                    fullHeight: 508,
                    aspectRatio: undefined
                  }
            }
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__rncdX)}>
          {p.renderPlasmicSlot({
            defaultContents: "Marketing",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
      </p.PlasmicLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopicBox__ArgProps,
      internalVariantPropNames: PlasmicTopicBox__VariantProps
    });

    return PlasmicTopicBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopicBox";
  } else {
    func.displayName = `PlasmicTopicBox.${nodeName}`;
  }
  return func;
}

export const PlasmicTopicBox = Object.assign(
  // Top-level PlasmicTopicBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicTopicBox
    internalVariantProps: PlasmicTopicBox__VariantProps,
    internalArgProps: PlasmicTopicBox__ArgProps
  }
);

export default PlasmicTopicBox;
/* prettier-ignore-end */
