// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: 2YFxA6hcKs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: MfRpGDkJ8b4/component
import { Input } from "antd"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import ReadingBox from "../../ReadingBox"; // plasmic-import: -2Xh8VfZof/component
import Footer from "../../Footer"; // plasmic-import: VbkWmUKrYAc/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicResourcesForBusinesses.module.css"; // plasmic-import: 2YFxA6hcKs/css
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: uw7miSE_556/icon

export const PlasmicResourcesForBusinesses__VariantProps = new Array();

export const PlasmicResourcesForBusinesses__ArgProps = new Array();

function PlasmicResourcesForBusinesses__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            data-plasmic-name={"top"}
            data-plasmic-override={overrides.top}
            className={classNames(projectcss.all, sty.top)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"101 Resources for Small Businesses"}
            </h2>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___6OpaA)}>
            {true ? (
              <div
                data-plasmic-name={"searchStack"}
                data-plasmic-override={overrides.searchStack}
                className={classNames(projectcss.all, sty.searchStack)}
              >
                <SearchsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <Input
                  data-plasmic-name={"searchBar"}
                  data-plasmic-override={overrides.searchBar}
                  allowClear={false}
                  bordered={true}
                  className={classNames("__wab_instance", sty.searchBar)}
                  maxLength={200}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__n0Gvc)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"resources"}
              data-plasmic-override={overrides.resources}
              hasGap={true}
              className={classNames(projectcss.all, sty.resources)}
            >
              <div className={classNames(projectcss.all, sty.column___9ENe)}>
                <ReadingBox
                  data-plasmic-name={"readingBox"}
                  data-plasmic-override={overrides.readingBox}
                  className={classNames("__wab_instance", sty.readingBox)}
                />
              </div>

              <div className={classNames(projectcss.all, sty.column__cg4B5)} />

              <div className={classNames(projectcss.all, sty.column___1Q8Pp)} />

              <div className={classNames(projectcss.all, sty.column__qyjxw)} />
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___8HyRy)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "top",
    "h2",
    "searchStack",
    "svg",
    "searchBar",
    "resources",
    "readingBox",
    "footer"
  ],

  navbar: ["navbar"],
  top: ["top", "h2"],
  h2: ["h2"],
  searchStack: ["searchStack", "svg", "searchBar"],
  svg: ["svg"],
  searchBar: ["searchBar"],
  resources: ["resources", "readingBox"],
  readingBox: ["readingBox"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicResourcesForBusinesses__ArgProps,
      internalVariantPropNames: PlasmicResourcesForBusinesses__VariantProps
    });

    return PlasmicResourcesForBusinesses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResourcesForBusinesses";
  } else {
    func.displayName = `PlasmicResourcesForBusinesses.${nodeName}`;
  }
  return func;
}

export const PlasmicResourcesForBusinesses = Object.assign(
  // Top-level PlasmicResourcesForBusinesses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    top: makeNodeComponent("top"),
    h2: makeNodeComponent("h2"),
    searchStack: makeNodeComponent("searchStack"),
    svg: makeNodeComponent("svg"),
    searchBar: makeNodeComponent("searchBar"),
    resources: makeNodeComponent("resources"),
    readingBox: makeNodeComponent("readingBox"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicResourcesForBusinesses
    internalVariantProps: PlasmicResourcesForBusinesses__VariantProps,
    internalArgProps: PlasmicResourcesForBusinesses__ArgProps
  }
);

export default PlasmicResourcesForBusinesses;
/* prettier-ignore-end */
