// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: 2YFxA6hcKs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: MfRpGDkJ8b4/component
import { Input } from "antd"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import { Select } from "antd"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import ReadingBox from "../../ReadingBox"; // plasmic-import: -2Xh8VfZof/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicResourcesForBusinesses.module.css"; // plasmic-import: 2YFxA6hcKs/css
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: uw7miSE_556/icon

export const PlasmicResourcesForBusinesses__VariantProps = new Array();

export const PlasmicResourcesForBusinesses__ArgProps = new Array();

function PlasmicResourcesForBusinesses__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"searchStack"}
              data-plasmic-override={overrides.searchStack}
              className={classNames(projectcss.all, sty.searchStack)}
            >
              <SearchsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"searchBar"}
                data-plasmic-override={overrides.searchBar}
                allowClear={false}
                bordered={true}
                className={classNames("__wab_instance", sty.searchBar)}
                maxLength={200}
              />

              <Select
                data-plasmic-name={"selectDropdown"}
                data-plasmic-override={overrides.selectDropdown}
                className={classNames("__wab_instance", sty.selectDropdown)}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zIam5
                    )}
                  >
                    {"Select"}
                  </div>
                }
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__vbrYy
                  )}
                  value={"Option"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fkmwQ
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>
            </div>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"resources"}
            data-plasmic-override={overrides.resources}
            hasGap={true}
            className={classNames(projectcss.all, sty.resources)}
          >
            <div className={classNames(projectcss.all, sty.column___9ENe)}>
              <ReadingBox
                data-plasmic-name={"readingBox"}
                data-plasmic-override={overrides.readingBox}
                className={classNames("__wab_instance", sty.readingBox)}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__cg4B5)} />

            <div className={classNames(projectcss.all, sty.column___1Q8Pp)} />

            <div className={classNames(projectcss.all, sty.column__qyjxw)} />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "freeBox",
    "searchStack",
    "svg",
    "searchBar",
    "selectDropdown",
    "resources",
    "readingBox"
  ],

  navbar: ["navbar"],
  freeBox: ["freeBox", "searchStack", "svg", "searchBar", "selectDropdown"],
  searchStack: ["searchStack", "svg", "searchBar", "selectDropdown"],
  svg: ["svg"],
  searchBar: ["searchBar"],
  selectDropdown: ["selectDropdown"],
  resources: ["resources", "readingBox"],
  readingBox: ["readingBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicResourcesForBusinesses__ArgProps,
      internalVariantPropNames: PlasmicResourcesForBusinesses__VariantProps
    });

    return PlasmicResourcesForBusinesses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResourcesForBusinesses";
  } else {
    func.displayName = `PlasmicResourcesForBusinesses.${nodeName}`;
  }
  return func;
}

export const PlasmicResourcesForBusinesses = Object.assign(
  // Top-level PlasmicResourcesForBusinesses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    freeBox: makeNodeComponent("freeBox"),
    searchStack: makeNodeComponent("searchStack"),
    svg: makeNodeComponent("svg"),
    searchBar: makeNodeComponent("searchBar"),
    selectDropdown: makeNodeComponent("selectDropdown"),
    resources: makeNodeComponent("resources"),
    readingBox: makeNodeComponent("readingBox"),
    // Metadata about props expected for PlasmicResourcesForBusinesses
    internalVariantProps: PlasmicResourcesForBusinesses__VariantProps,
    internalArgProps: PlasmicResourcesForBusinesses__ArgProps
  }
);

export default PlasmicResourcesForBusinesses;
/* prettier-ignore-end */
