// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: _PI7_BduYq
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicContactButton.module.css"; // plasmic-import: _PI7_BduYq/css

export const PlasmicContactButton__VariantProps = new Array("unnamedVariant");

export const PlasmicContactButton__ArgProps = new Array();

function PlasmicContactButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootunnamedVariant]: hasVariant(
            variants,
            "unnamedVariant",
            "unnamedVariant"
          )
        }
      )}
    >
      {hasVariant(variants, "unnamedVariant", "unnamedVariant")
        ? "Thanks so much! We'll be in touch soon!"
        : "Say hi! We'd love to hear what you're working on ðŸ˜Š"}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContactButton__ArgProps,
      internalVariantPropNames: PlasmicContactButton__VariantProps
    });

    return PlasmicContactButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactButton";
  } else {
    func.displayName = `PlasmicContactButton.${nodeName}`;
  }
  return func;
}

export const PlasmicContactButton = Object.assign(
  // Top-level PlasmicContactButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicContactButton
    internalVariantProps: PlasmicContactButton__VariantProps,
    internalArgProps: PlasmicContactButton__ArgProps
  }
);

export default PlasmicContactButton;
/* prettier-ignore-end */
