// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: NIyfODJbPf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicDataOnBox.module.css"; // plasmic-import: NIyfODJbPf/css

export const PlasmicDataOnBox__VariantProps = new Array();

export const PlasmicDataOnBox__ArgProps = new Array("children", "slot");

function PlasmicDataOnBox__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__nmY0K)}>
        {p.renderPlasmicSlot({
          defaultContents: "Every",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__chJ1R)}>
        {p.renderPlasmicSlot({
          defaultContents: "City in the world",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDataOnBox__ArgProps,
      internalVariantPropNames: PlasmicDataOnBox__VariantProps
    });

    return PlasmicDataOnBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataOnBox";
  } else {
    func.displayName = `PlasmicDataOnBox.${nodeName}`;
  }
  return func;
}

export const PlasmicDataOnBox = Object.assign(
  // Top-level PlasmicDataOnBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicDataOnBox
    internalVariantProps: PlasmicDataOnBox__VariantProps,
    internalArgProps: PlasmicDataOnBox__ArgProps
  }
);

export default PlasmicDataOnBox;
/* prettier-ignore-end */
