// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: uN9VsJ5tvm
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: MfRpGDkJ8b4/component
import Cta from "../../Cta"; // plasmic-import: TsikC-dst8p/component
import Footer from "../../Footer"; // plasmic-import: VbkWmUKrYAc/component
import { useScreenVariants as useScreenVariantsgXe7KpKqBjNjl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gXe7KpKqBjNJL/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicChecklist.module.css"; // plasmic-import: uN9VsJ5tvm/css

export const PlasmicChecklist__VariantProps = new Array();

export const PlasmicChecklist__ArgProps = new Array();

function PlasmicChecklist__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgXe7KpKqBjNjl()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tt59X)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yYsQs
                )}
              >
                {"The tools to grow your business"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__loU4D
                )}
              >
                {
                  "A free checklist with all the answers â€” and none of the fluff."
                }
              </div>

              <p.PlasmicLink
                data-plasmic-name={"httpscodaiostackInputtheSmbChecklist3"}
                data-plasmic-override={
                  overrides.httpscodaiostackInputtheSmbChecklist3
                }
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.httpscodaiostackInputtheSmbChecklist3
                )}
                component={Link}
                href={"https://coda.io/@stack-input/the-smb-checklist"}
                platform={"nextjs"}
                target={"_blank"}
              >
                {"Access Checklist Here ðŸš€ "}
              </p.PlasmicLink>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__aiGp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zc8A
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    "facts"
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"The only list of resources you'll need"}
                      </h3>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bUBif
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"we're on a misssion"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"A concise guide to growing your business"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ic75H
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Enter some text"
                    : "We know it's not easy handling everything by yourself. This checklist/tookit is here to help you keep your head on straight."}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rlnHa
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    "we're on a misssion"
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"A list of additional resources"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__lZkHe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__snc2K
                    )}
                  >
                    {
                      "We don't have all the answers, and there are so many great resources online. So we've tried our best to consolidate some of the best ones :)"
                    }
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dQDs
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    "we're on a misssion"
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"More questions? A group of mentors."}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___77V4E
                  )}
                >
                  {
                    "And if we haven't answered something that's really bugging you in your business, shoot us a message and we'll message you back asap!"
                  }
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.column__a6JuX)}>
                <p.PlasmicLink
                  data-plasmic-name={"httpscodaiostackInputtheSmbChecklist"}
                  data-plasmic-override={
                    overrides.httpscodaiostackInputtheSmbChecklist
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.httpscodaiostackInputtheSmbChecklist
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nBKhj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"600px"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/the_smb_toolkit/images/fullFrame1Png.png",
                      fullWidth: 972,
                      fullHeight: 636,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"checklist"}
            data-plasmic-override={overrides.checklist}
            className={classNames(projectcss.all, sty.checklist)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1XgPq
              )}
            >
              {"The Checklist (Part 1 ðŸ˜Š)"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__lzeUs)}>
              <div className={classNames(projectcss.all, sty.freeBox__v4G)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qnDnf)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ts3Gu)}
                    displayHeight={"auto"}
                    displayMaxHeight={"280px"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"300px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/the_smb_toolkit/images/marketingAllpng.png",
                      fullWidth: 379,
                      fullHeight: 307,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__lPx9Q)}
                    displayHeight={"auto"}
                    displayMaxHeight={"280px"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"300px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/the_smb_toolkit/images/legalAllpng2.png",
                      fullWidth: 379,
                      fullHeight: 307,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__emtTu)}
                    displayHeight={"auto"}
                    displayMaxHeight={"280px"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"300px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/the_smb_toolkit/images/accessCapitalAllpng.png",
                      fullWidth: 376,
                      fullHeight: 307,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>

                <div
                  className={classNames(projectcss.all, sty.freeBox___6Uajn)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1HTdo
                    )}
                  >
                    {
                      "We hope the checklist is helpful! \nPlease message us if you have topics you want covered on the checklist!"
                    }
                  </div>

                  <p.PlasmicLink
                    data-plasmic-name={"httpscodaiostackInputtheSmbChecklist2"}
                    data-plasmic-override={
                      overrides.httpscodaiostackInputtheSmbChecklist2
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.httpscodaiostackInputtheSmbChecklist2
                    )}
                    component={Link}
                    href={"https://coda.io/@stack-input/the-smb-checklist"}
                    platform={"nextjs"}
                    target={"_blank"}
                  >
                    {"Access the Checklist Here ðŸš€ "}
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </div>

          <Cta
            data-plasmic-name={"cta"}
            data-plasmic-override={overrides.cta}
            className={classNames("__wab_instance", sty.cta)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "hero",
    "httpscodaiostackInputtheSmbChecklist3",
    "columns",
    "h3",
    "httpscodaiostackInputtheSmbChecklist",
    "checklist",
    "httpscodaiostackInputtheSmbChecklist2",
    "cta",
    "footer"
  ],

  navbar: ["navbar"],
  hero: [
    "hero",
    "httpscodaiostackInputtheSmbChecklist3",
    "columns",
    "h3",
    "httpscodaiostackInputtheSmbChecklist"
  ],

  httpscodaiostackInputtheSmbChecklist3: [
    "httpscodaiostackInputtheSmbChecklist3"
  ],

  columns: ["columns", "h3", "httpscodaiostackInputtheSmbChecklist"],
  h3: ["h3"],
  httpscodaiostackInputtheSmbChecklist: [
    "httpscodaiostackInputtheSmbChecklist"
  ],

  checklist: ["checklist", "httpscodaiostackInputtheSmbChecklist2"],
  httpscodaiostackInputtheSmbChecklist2: [
    "httpscodaiostackInputtheSmbChecklist2"
  ],

  cta: ["cta"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChecklist__ArgProps,
      internalVariantPropNames: PlasmicChecklist__VariantProps
    });

    return PlasmicChecklist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChecklist";
  } else {
    func.displayName = `PlasmicChecklist.${nodeName}`;
  }
  return func;
}

export const PlasmicChecklist = Object.assign(
  // Top-level PlasmicChecklist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    hero: makeNodeComponent("hero"),
    httpscodaiostackInputtheSmbChecklist3: makeNodeComponent(
      "httpscodaiostackInputtheSmbChecklist3"
    ),

    columns: makeNodeComponent("columns"),
    h3: makeNodeComponent("h3"),
    httpscodaiostackInputtheSmbChecklist: makeNodeComponent(
      "httpscodaiostackInputtheSmbChecklist"
    ),

    checklist: makeNodeComponent("checklist"),
    httpscodaiostackInputtheSmbChecklist2: makeNodeComponent(
      "httpscodaiostackInputtheSmbChecklist2"
    ),

    cta: makeNodeComponent("cta"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicChecklist
    internalVariantProps: PlasmicChecklist__VariantProps,
    internalArgProps: PlasmicChecklist__ArgProps
  }
);

export default PlasmicChecklist;
/* prettier-ignore-end */
