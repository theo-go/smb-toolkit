// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: 6ql_UK2WJy
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicFunFactBox.module.css"; // plasmic-import: 6ql_UK2WJy/css

export const PlasmicFunFactBox__VariantProps = new Array(
  "unnamedVariant",
  "unnamedVariant2",
  "unnamedVariant3",
  "unnamedVariant4",
  "unnamedVariant5"
);

export const PlasmicFunFactBox__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3"
);

function PlasmicFunFactBox__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootunnamedVariant2]: hasVariant(
            variants,
            "unnamedVariant2",
            "unnamedVariant2"
          ),

          [sty.rootunnamedVariant3]: hasVariant(
            variants,
            "unnamedVariant3",
            "unnamedVariant3"
          ),

          [sty.rootunnamedVariant4]: hasVariant(
            variants,
            "unnamedVariant4",
            "unnamedVariant4"
          ),

          [sty.rootunnamedVariant5]: hasVariant(
            variants,
            "unnamedVariant5",
            "unnamedVariant5"
          ),

          [sty.rootunnamedVariant]: hasVariant(
            variants,
            "unnamedVariant",
            "unnamedVariant"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___75IBj)}>
        {p.renderPlasmicSlot({
          defaultContents: "Small businesses account for...",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenunnamedVariant2]: hasVariant(
              variants,
              "unnamedVariant2",
              "unnamedVariant2"
            ),

            [sty.slotTargetChildrenunnamedVariant3]: hasVariant(
              variants,
              "unnamedVariant3",
              "unnamedVariant3"
            ),

            [sty.slotTargetChildrenunnamedVariant4]: hasVariant(
              variants,
              "unnamedVariant4",
              "unnamedVariant4"
            ),

            [sty.slotTargetChildrenunnamedVariant5]: hasVariant(
              variants,
              "unnamedVariant5",
              "unnamedVariant5"
            )
          })
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__ajoCz)}>
        <div className={classNames(projectcss.all, sty.freeBox__rcvll)}>
          {p.renderPlasmicSlot({
            defaultContents: "90",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlotunnamedVariant2]: hasVariant(
                variants,
                "unnamedVariant2",
                "unnamedVariant2"
              ),

              [sty.slotTargetSlotunnamedVariant3]: hasVariant(
                variants,
                "unnamedVariant3",
                "unnamedVariant3"
              ),

              [sty.slotTargetSlotunnamedVariant4]: hasVariant(
                variants,
                "unnamedVariant4",
                "unnamedVariant4"
              ),

              [sty.slotTargetSlotunnamedVariant5]: hasVariant(
                variants,
                "unnamedVariant5",
                "unnamedVariant5"
              )
            })
          })}
        </div>

        {(
          hasVariant(variants, "unnamedVariant", "unnamedVariant") ? true : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__th3RG, {
              [sty.freeBoxunnamedVariant2__th3RGNsLvC]: hasVariant(
                variants,
                "unnamedVariant2",
                "unnamedVariant2"
              ),

              [sty.freeBoxunnamedVariant3__th3RGpzIk]: hasVariant(
                variants,
                "unnamedVariant3",
                "unnamedVariant3"
              ),

              [sty.freeBoxunnamedVariant4__th3RGmlvrB]: hasVariant(
                variants,
                "unnamedVariant4",
                "unnamedVariant4"
              ),

              [sty.freeBoxunnamedVariant5__th3RG4Nxsx]: hasVariant(
                variants,
                "unnamedVariant5",
                "unnamedVariant5"
              ),

              [sty.freeBoxunnamedVariant__th3RG6M9Xz]: hasVariant(
                variants,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "%",
              value: args.slot3,
              className: classNames(sty.slotTargetSlot3, {
                [sty.slotTargetSlot3unnamedVariant2]: hasVariant(
                  variants,
                  "unnamedVariant2",
                  "unnamedVariant2"
                ),

                [sty.slotTargetSlot3unnamedVariant3]: hasVariant(
                  variants,
                  "unnamedVariant3",
                  "unnamedVariant3"
                ),

                [sty.slotTargetSlot3unnamedVariant4]: hasVariant(
                  variants,
                  "unnamedVariant4",
                  "unnamedVariant4"
                ),

                [sty.slotTargetSlot3unnamedVariant5]: hasVariant(
                  variants,
                  "unnamedVariant5",
                  "unnamedVariant5"
                ),

                [sty.slotTargetSlot3unnamedVariant]: hasVariant(
                  variants,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })
            })}
          </div>
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___7V8JZ)}>
        {p.renderPlasmicSlot({
          defaultContents: "of all global companies",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2, {
            [sty.slotTargetSlot2unnamedVariant2]: hasVariant(
              variants,
              "unnamedVariant2",
              "unnamedVariant2"
            ),

            [sty.slotTargetSlot2unnamedVariant3]: hasVariant(
              variants,
              "unnamedVariant3",
              "unnamedVariant3"
            ),

            [sty.slotTargetSlot2unnamedVariant4]: hasVariant(
              variants,
              "unnamedVariant4",
              "unnamedVariant4"
            ),

            [sty.slotTargetSlot2unnamedVariant5]: hasVariant(
              variants,
              "unnamedVariant5",
              "unnamedVariant5"
            )
          })
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFunFactBox__ArgProps,
      internalVariantPropNames: PlasmicFunFactBox__VariantProps
    });

    return PlasmicFunFactBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFunFactBox";
  } else {
    func.displayName = `PlasmicFunFactBox.${nodeName}`;
  }
  return func;
}

export const PlasmicFunFactBox = Object.assign(
  // Top-level PlasmicFunFactBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFunFactBox
    internalVariantProps: PlasmicFunFactBox__VariantProps,
    internalArgProps: PlasmicFunFactBox__ArgProps
  }
);

export default PlasmicFunFactBox;
/* prettier-ignore-end */
