// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vZXZgeU1YqYWghemcQX2Q1
// Component: -2Xh8VfZof
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_the_smb_toolkit.module.css"; // plasmic-import: vZXZgeU1YqYWghemcQX2Q1/projectcss
import sty from "./PlasmicReadingBox.module.css"; // plasmic-import: -2Xh8VfZof/css

export const PlasmicReadingBox__VariantProps = new Array();

export const PlasmicReadingBox__ArgProps = new Array();

function PlasmicReadingBox__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rcX43)}>
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"207px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"265px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/the_smb_toolkit/images/image.svg",
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__rGfKx)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bSt2B
          )}
        >
          {"Title"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zs3M
          )}
        >
          {"Title"}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicReadingBox__ArgProps,
      internalVariantPropNames: PlasmicReadingBox__VariantProps
    });

    return PlasmicReadingBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReadingBox";
  } else {
    func.displayName = `PlasmicReadingBox.${nodeName}`;
  }
  return func;
}

export const PlasmicReadingBox = Object.assign(
  // Top-level PlasmicReadingBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicReadingBox
    internalVariantProps: PlasmicReadingBox__VariantProps,
    internalArgProps: PlasmicReadingBox__ArgProps
  }
);

export default PlasmicReadingBox;
/* prettier-ignore-end */
