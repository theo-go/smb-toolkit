// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import GlobalContextsProvider from "../components/plasmic/the_smb_toolkit/PlasmicGlobalContextsProvider";
import { PlasmicInvestorsAndCity } from "../components/plasmic/the_smb_toolkit/PlasmicInvestorsAndCity";
import { useState, useEffect } from "react"
import TeamBox from "../components/TeamBox";

function InvestorsAndCity() {
  const [resources, setResources] = useState([]);

  useEffect(() => {
    var airtable_url = "https://api.airtable.com/v0/appSy47rJWGPi4t2m/Staff?api_key=" + "key5t3q3H8TgvBOMs"
    fetch(airtable_url)
      .then((res) => res.json())
      .then((resources) => {
        setResources(resources);
        console.log(resources);
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);
  // Use PlasmicInvestorsAndCity to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicInvestorsAndCity are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicInvestorsAndCity is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  if (resources.records) {
    return (
      <GlobalContextsProvider>
        <PlasmicInvestorsAndCity

          teamMembers={{
            children: resources.records.map((item) => {
              return (
                <TeamBox
                  name={item.fields.Name}
                  description={item.fields.Description}
                  teamImg={item.fields.Image[0].url}
                />
              )
            })
          }}

        />
      </GlobalContextsProvider>
    );
  }
return (<GlobalContextsProvider>
  <PlasmicInvestorsAndCity/>
</GlobalContextsProvider>
);
}

export default InvestorsAndCity;
